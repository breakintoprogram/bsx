;
; Title:	Z80 Monitor for BSX
; Author:	Dean Belfield
; Created:	12/05/2020
; Last Updated:	03/06/2020
;
; Modinfo:
; 22/05/2020:	Moved SYS_VARS to last page of RAM
;		Added B option to jump to BBC Basic
; 28/05/2020:	Added O(ut) and I(n) instructions
;		Added ASCII column for memory dump
; 29/05/2020:	O(ut) instruction now supports Hex and ASCII strings
; 03/06/2020:	Added Z80 disassembler
;

;
; Start
;
Start:			IF SKIP_MEMTEST = 1
			LD HL,0x0000
			XOR A 
			JR 3F 
			ELSE 
			LD HL,RAM_START
			LD C,0b10101010
1:			LD (HL),C
			LD A,(HL)
			CP C
			JR NZ,3F
			INC HL
			LD A,L
			OR A
			JR NZ,2F
			LD A,"."
			OUT (PORT_STM_IO),A 
2:			LD A,H
			OR A
			JR NZ,1B
			ENDIF
3:			LD (SYS_VARS_RAMTOP),HL		; Store last byte of physical RAM in the system variables
			LD SP,HL			; Set the stack pointer
			JR Z,Memtest_OK
			LD HL,MSG_BADRAM
			JR Ready
Memtest_OK:		LD HL,MSG_READY

Ready:			PUSH HL
			LD HL,MSG_STARTUP
			CALL Print_String
			POP HL
			CALL Print_String

Input:			LD HL,SYS_VARS_INPUT		; Input buffer
			LD B,0				; Cursor position
Input_Loop:		RST 8				; Read a key from the keyboard
			OR A				; Check for zero
			JR Z,Input_Loop			; Loop - no key input yet
			RST 16				; Output the character
			CP 0x7F: JR Z,Input_Backspace	; Handle backspace

			LD (HL),A			; Store the character in the buffer
			INC HL				; Increment to next character in buffer
			INC B 				; Increment the cursor position
			CP 0x0D				; Check for newline
			JR NZ,Input_Loop		; If not pressed, then loop

			CALL Print_CR			; Output a carriage return

			LD A,(SYS_VARS_INPUT)		; Check the first character of input
			LD HL,Input_Ret			; Push the return address on the stack
			PUSH HL
			CP 'B': JP Z,FN_Basic
			CP 'D': JP Z,FN_Disassemble
			CP 'M': JP Z,FN_Memory_Dump
			CP 'L': JP Z,FN_Memory_Load
			CP 'J': JP Z,FN_Jump
			CP 'O': JP Z,FN_Port_Out
			CP 'I': JP Z,FN_Port_In
			CP 0x0D
			RET Z
			LD HL,MSG_INVALID_CMD		; Unknown command error
			JP Print_String 

Input_Ret:		CALL Print_CR			; On return from the function, print a carriage return
			LD HL,MSG_READY			; And the ready message
			CALL Print_String 
			JR Input 			; Loop around for next input line

Input_Backspace:	LD A,B				; Are we on the first character?
			OR A 
			JR Z,Input_Loop
			DEC HL				; Skip back in the buffer
			DEC B
			LD (HL),0
			JR Input_Loop

FN_Basic:		JP BAS_START

FN_Jump:		LD HL,SYS_VARS_INPUT+1
			CALL Parse_Hex16
			EX DE,HL
			JP (HL)

FN_Port_Out:		LD HL,SYS_VARS_INPUT+1
			CALL Parse_Hex16
			LD A,(HL)
			CP ','
			JR NZ,FN_Port_Out_Err2
			INC HL
			LD A,D
			OR A
			JR NZ,FN_Port_Out_Err1
			LD C,E 
1:			LD A,(HL)
			CP 0x0D	; CR
			RET Z
			CP 0x22 ; Quote
			JR Z,2F
			CALL Parse_Hex8
			OUT (C),E 
			JR 1B

2:			INC HL 
			LD A,(HL) 
			CP 0x0D
			RET Z
			CP 0x22
			JR Z,3F
			OUT (C),A
			JR 2B
3:			INC HL
			JR 1B

FN_Port_Out_Err1:	LD HL,MSG_INVALID_PORT
			JP Print_String
FN_Port_Out_Err2:	LD HL,MSG_ERROR
			JP Print_String

FN_Port_In:		LD HL,SYS_VARS_INPUT+1
			CALL Parse_Hex16
			LD A,(HL)
			CP ','
			JR NZ,1F
			INC HL
			PUSH DE
			CALL Parse_Hex16
			POP BC 
			LD A,B
			OR A 
			JR NZ,2F
			LD A,D
			OR E
			JR NZ,Port_Dump
1:			LD HL,MSG_ERROR
			JP Print_String			
2:			LD HL,MSG_INVALID_PORT
			JP Print_String

FN_Memory_Load:		RST 8: LD L,A
			RST 8: LD H,A 
			RST 8: LD C,A 
			RST 8: LD B,A 
1:			RST 8
			LD (HL),A
			INC HL
			DEC BC
			LD A,B 
			OR C
			JR NZ,1B
			RET 

FN_Disassemble:		LD HL,SYS_VARS_INPUT+1 
			CALL Parse_Hex16
			LD A,(HL)
			CP ','
			JR NZ,2F
			INC HL
			PUSH DE
			CALL Parse_Hex16
			POP HL  
			LD B,D 
			LD C,E 
			LD IX,SYS_VARS_INPUT
			LD A,B 
			OR C 
			JP NZ,Disassemble 
2:			LD HL,MSG_ERROR
			JP Print_String

FN_Memory_Dump:		LD HL,SYS_VARS_INPUT+1
			CALL Parse_Hex16
			LD A,(HL)
			CP ','
			JR NZ,2F
			INC HL
			PUSH DE
			CALL Parse_Hex16
			POP HL 
			LD A,D 
			OR E 
			JP NZ,Memory_Dump 
2:			LD HL,MSG_ERROR
			JP Print_String

; Print a zero terminated string to the terminal port
; HL: Address of the string
;
Print_String:		LD A,(HL)
			OR A
			RET Z
			RST 16
			INC HL
			JR Print_String 

; Dump some ports out
;  C: Port
; DE: Number of bytes to read
;
Port_Dump:		IN A,(C)
			CALL Print_Hex8
			DEC DE
			LD A,D
			OR E
			RET Z
			CALL Read_Char_NB
			CP 0x1B
			RET Z 
			JR Port_Dump

; Dump some memory out
; HL: Start of memory to dump
; DE: Number of bytes to dump out
;
Memory_Dump:		CALL Print_Hex16
			LD A,':'
			RST 16
			LD A,' '
			RST 16
			LD B,16
			LD IX,SYS_VARS_INPUT
			LD (IX+0),' '
1:			LD A,(HL)
			PUSH AF
			CP 32
			JR NC,2F
			LD A,'.'
2:			LD (IX+1),A
			INC IX
			POP AF
			CALL Print_Hex8 
			INC HL
			DEC DE
			LD A,D
			OR E
			JR Z,3F
			CALL Read_Char_NB
			CP 0x1B
			JR Z,3F
			DJNZ 1B
			CALL 5F
			JR Memory_Dump

3:			LD A,B 
			OR A
			JR Z,5F
			DEC B 
			JR Z,5F
			LD A,32
4:			RST 16
			RST 16
			DJNZ 4B

5:			LD (IX+1),0x0D
			LD (IX+2),0x0A
			LD (IX+3),0x00
			PUSH HL
			LD HL,SYS_VARS_INPUT
			CALL Print_String
			POP HL
			RET

; Parse a hex string (up to 2 nibbles) to a binary
; HL: Address of hex (ASCII)
;  E: Output
;
Parse_Hex8:		LD DE,0
			LD B,2
			JR Parse_Hex

; Parse a hex string (up to 4 nibbles) to a binary
; HL: Address of hex (ASCII)
; DE: Output
;
Parse_Hex16:		LD DE,0			; Clear the output
			LD B,4			; Maximum number of nibbles
Parse_Hex:		LD A,(HL)		; Get the nibble
			SUB '0'			; Normalise to 0
			RET C			; Return if < ASCII '0'
			CP 10			; Check if >= 10
			JR C,1F
			SUB 7			; Adjust ASCII A-F to nibble
			CP 16			; Check for > F
			RET NC			; Return
1:			SLA DE 			; Shfit DE left 4 times
			SLA DE 
			SLA DE
			SLA DE 
			OR E			; OR the nibble into E
			LD E,A 
			INC HL 			; Increase pointer to next byte of input
			DJNZ Parse_Hex		; Loop around
			RET

; Print a 16-bit HEX number
; HL: Number to print
;
Print_Hex16:		LD A,H
			CALL Print_Hex8
			LD A,L

; Print an 8-bit HEX number
; A: Number to print
;
Print_Hex8:		LD C,A
			RRA 
			RRA 
			RRA 
			RRA 
			CALL 1F 
			LD A,C 
1:			AND 0x0F
			ADD A,0x90
			DAA
			ADC A,0x40
			DAA
			RST 16
			RET 			

; Print CR/LF
;
Print_CR:		LD A,0x0D
			RST 16
			LD A,0x0A
			RST 16
			RET

; Print a single character
; A: ASCII character
;
Print_Char:		OUT (PORT_STM_IO),A 
			RET 

; Read a character - waits for input
; A: ASCII character
;
Read_Char:		IN A,(PORT_STM_FLAGS)
			AND 0x01
			JR Z,Read_Char
Read_Char_NB:		IN A,(PORT_STM_IO)
			RET 
;			
; Messages
;
MSG_STARTUP:		DZ "BSX Version 0.1\n\r"
MSG_READY:		DZ "Ready\n\r"
MSG_BADRAM:		DZ "Mem Fault\n\r"
MSG_ERROR:		DZ "Error\n\r"
MSG_INVALID_CMD:	DZ "Invalid Command\n\r"
MSG_INVALID_PORT:	DZ "Invalid Port #\n\r"
MSG_OUT_OF_RANGE:	DZ "Value out of range\n\r"


